#!/usr/bin/guile \
-e main -s
!#

;;; mantra: Pronounceable password generator in Guile
;;; Copyright (C) 2019  Curtis Mackie
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; -*- mode: scheme -*-

(add-to-load-path (dirname (current-filename)))

(use-modules (generator))
(use-modules (ice-9 getopt-long))

(define program "mantra")
(define version '(1 0 1))

;; Option specification for use with getopt-long
(define option-spec
  `((entropy  (single-char #\e) (value #t) (predicate ,string->number))
    (count    (single-char #\n) (value #t) (predicate ,string->number))
    (blocking (single-char #\b) (value #f))
    (no-nl    (single-char #\q) (value #f))
    (version  (single-char #\v) (value #f))
    (help     (single-char #\h) (value #f))))

;; The blocking parameter is defined in generator.scm
(define entropy (make-parameter #f))
(define count   (make-parameter #f))
(define no-nl   (make-parameter #f))

;; A default password entropy of 40 bits is slightly padded from zxcvbn's
;; requirement of 10^10 possibilities for a "very unguessable" score, which is
;; adequate for most uses while still generating short, easily remembered
;; passwords.
(define default-entropy "40")
(define default-count    "1")

;; Print the version string
(define (print-version)
  (format #t "~a v~a.~a.~a~%"
          program
          (car version)
          (cadr version)
          (caddr version)))

;; Print the usage/help information.
(define (print-usage progname)
  (format #t "\
Generate random pronounceable passwords.
usage: ~a [options]
    -e, --entropy X    Set minimum entropy to X bits (default ~a)
    -n, --count N      Generate N passwords (default ~a)
    -b, --blocking     Use /dev/random instead of /dev/urandom
    -q, --no-nl        Suppress the final terminating newline

    -v, --version      Display program version
    -h, --help         Display this help~%"
          (basename progname)
          default-entropy
          default-count))

;; Print (count) passwords of minimum entropy (entropy) bits.
(define (print-passwords)
  (do ((i 1 (1+ i)))
      ((> i (count)))
    (display (random-password (entropy)))
    ;; Don't print newline after final password when no-nl is set
    (unless (and (= i (count))
                 (no-nl))
      (newline))))

;; Script entrypoint
(define (main args)
  (let ((progname (car args))
        (options (getopt-long args option-spec)))
    ;; Check if the user is requesting version or help. Both can be requested
    ;; simultaneously, but if either is requested, normal output is suppressed.
    (let ((version-wanted (option-ref options 'version #f))
          (help-wanted    (option-ref options 'help    #f)))
      (if (or version-wanted help-wanted)
          (begin
            (when version-wanted (print-version))
            (when help-wanted (print-usage progname)))
          ;; Otherwise, set up to print passwords normally.
          (parameterize ((entropy  (string->number
                                    (option-ref options 'entropy
                                                default-entropy)))
                         (count    (string->number
                                    (option-ref options 'count
                                                default-count)))
                         (blocking (option-ref options 'blocking #f))
                         (no-nl    (option-ref options 'no-nl    #f)))
            (print-passwords))))))

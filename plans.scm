;;; mantra: Pronounceable password generator in Guile
;;; Copyright (C) 2019-2020  Curtis Mackie
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

(define-module (plans)
  #:use-module (generator)
  #:use-module (srfi srfi-1)

  #:export (compile-plan
            plan-entropy
            make-plan
            random-password))

;; Compile a list of the form (a 2 b 3 ... c N ...) into a plan of the form (a a
;; b b b ... [c repeated N times] ...), then shuffle that plan to produce a
;; final plan.  This will be used to turn the generation plan suggested by the
;; user's command line arguments into a list of phrase vectors; each phrase of
;; the final password will be selected from the corresponding phrase vector in
;; turn.  For example, the list:
;;
;; (#(a b c) #(1 2 3) #(1 2 3))
;;
;; could produce the password "a32", but not "ab2".
(define (compile-plan . args)
  (let recur
      ((accum '())
       (remaining args))
    (if (null? remaining)
        ;; Randomly shuffle the list at the end
        (vector->list (random-shuffle (list->vector accum)))
        (let ((next-phrases (first remaining))
              (next-number (second remaining)))
          (recur
           (append! (make-list next-number next-phrases) accum)
           (drop remaining 2))))))

;; Compute the factorial of its argument, which must be a positive exact integer
;; (or exact zero), as an exact integer.
(define factorial
  (case-lambda
    ((n)
     (cond
      ((not (integer? n)) (error "Non-integer factorial:" n))
      ((negative? n) (error "Negative factorial:" n))
      ((inexact? n) (error "Inexact factorial:" n))
      (#t (factorial n 1))))
    ((n accum)
     (cond
      ((zero? n) accum)
      ((= 1 n) accum)
      (#t (factorial (1- n) (* n accum)))))))

;; Compute of the generation plan `args', of the form (a 2 b 3 ... c N ...), the
;; entropy produced solely by the final permutation of the phrase vectors.  For
;; example, in the plan (a 2 b 3), there are 5! permutations ignoring the
;; repeats, and 5! / (2! * 3!) including the repeats.
;;
;; BUG: This currently does not account for the possibility that some phrase
;; vectors are actually just subsets of another.  If a password could be
;; generated by two separate permutations, then the permutation does not
;; contribute as much entropy as a na√Øve calculation would assume; I'm not
;; confident I fully understand the ramifcations of this.  As a result, this
;; function will not be used for the time being.
(define (perm-entropy . args)
  (let* ((counts (let recur ((accum '())
                             (remaining args))
                   (if (null? remaining)
                       accum
                       (recur (cons (second remaining) accum)
                              (drop remaining 2)))))
         (total-count (apply + counts))
         ;; Shortcut - when there's only one distinguishable type of phrase,
         ;; there's only one permutation
         (possibilities (if (<= (length counts) 1)
                            1
                            (fold
                             (lambda (current-count accum)
                               (/ accum (factorial current-count)))
                             (factorial total-count)
                             counts))))
    (log2 possibilities)))

;; Compute of the generation plan `args', of the form (a 2 b 3 ... c N ...), the
;; entropy of any password produced by that generation plan, given the sizes and
;; counts of the component phrase vectors.
(define (plan-entropy . args)
  (let recur
      ((accum 0d0)
       (remaining args))
    (if (null? remaining)
        ;; Due to the aforementioned bug, we will /not/ apply the permutation
        ;; entropy.
        (+ accum #;(apply perm-entropy args))
        (let ((next-phrases (first remaining))
              (next-number (second remaining))
              (next-remaining (drop remaining 2)))
          (cond
           ;; If next-number is 0, then no entropy is added.
           ((zero? next-number)
            (recur accum next-remaining))
           ;; If next-phrases is empty and next-number is nonzero,
           ;; then the plan is impossible.
           ((zero? (vector-length next-phrases))
            (throw 'impossible-plan))
           ;; Otherwise, the entropy per phrase is given by (phrase-entropy
           ;; next-phrases).  Because it's a logarithmic measure, the total
           ;; entropy added is obtained by multiplying.
           (#t
            (recur
             (+ accum (* next-number (phrase-entropy next-phrases)))
             (drop remaining 2))))))))

;; Given the generation plan `starting-args', of the form (a 2 b 3 ... c N ...),
;; produce a final generation plan with additional phrases from the phrase
;; vector `default-phrases' until an entropy of at least `minimum-entropy' bits
;; is attained.
(define (make-plan default-phrases minimum-entropy . starting-args)
  (let recur
      ((current-plan starting-args)
       (current-entropy (apply plan-entropy starting-args))
       (num-defaults 0))
    (if (>= current-entropy minimum-entropy)
        ;; Keep the current arguments
        current-plan
        ;; Otherwise, add another default
        (let* ((next-num-defaults (1+ num-defaults))
               (next-plan (append! (list default-phrases next-num-defaults) starting-args))
               (next-entropy (apply plan-entropy next-plan)))
          (recur next-plan next-entropy next-num-defaults)))))

;; Generate a random password using the compiled generation plan
;; `compiled-plan', a list of phrase vectors as output by `compile-plan'.
(define (random-password compiled-plan)
  (string-concatenate
   (map random-phrase compiled-plan)))
